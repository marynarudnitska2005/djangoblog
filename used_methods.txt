--- TASK 1 ---

"tnpu".upper()
Призначення: Перетворює всі літери в рядку на великі. Результат виконання цього коду - вивід рядка TNPU.

len("12345")
Призначення: Повертає кількість символів у рядку. У цьому випадку результат — 5, оскільки рядок містить 5 символів.

len(str(304023))
Призначення: Спочатку перетворює число 304023 на рядок за допомогою str(), а потім повертає кількість символів у цьому рядку. Результат — 6.

print(name)
Призначення: Виводить значення змінної name на екран. Якщо змінна name не визначена, буде помилка.

lottery = [3, 42, 12, 19, 30, 59]
Призначення: Створює список чисел і зберігає його в змінній lottery.

lottery.sort()
Призначення: Сортує список lottery у порядку зростання.

lottery.reverse()
Призначення: Змінює порядок елементів у списку lottery на протилежний (реверсує список).

lottery.pop(0)
Призначення: Видаляє перший елемент списку lottery (елемент з індексом 0) і повертає його значення.

def hi():
Призначення: Оголошує функцію з назвою hi, яка містить інструкції для виконання.

print('Hi there!')
Призначення: Виводить текст 'Hi there!' на екран.

print('How are you?')
Призначення: Виводить текст 'How are you?' на екран.

hi()
Призначення: Викликає функцію hi, яка виводить два рядки тексту: 'Hi there!' і 'How are you?'.

--- TAKS 2 ---

python manage.py startapp blog  
Створює новий додаток (app) з назвою `blog` у Django-проєкті.

python manage.py makemigrations blog  
Генерує файл міграцій для моделі додатка `blog`, щоб зафіксувати зміни в структурі бази даних.

python manage.py migrate blog 
Застосовує міграції для додатка `blog`, оновлюючи структуру бази даних відповідно до змін у моделях.

from blog.models import Post  
Імпортує модель `Post` з додатка `blog` для роботи з нею.  

Post.objects.all()  
Повертає всі об'єкти моделі `Post`, які зберігаються в базі даних.  

Post.objects.create(author=me, title='Sample title', text='Test')  
Створює новий об'єкт моделі `Post` з вказаними значеннями для полів `author`, `title` і `text`, і зберігає його в базі даних.  

from django.contrib.auth.models import User  
Імпортує модель `User` з вбудованої системи аутентифікації Django для роботи з користувачами.  

User.objects.all()  
Повертає всі об'єкти моделі `User`, які зберігаються в базі даних.  

Post.objects.filter(author=me)  
Повертає всі об'єкти моделі `Post`, у яких поле `author` відповідає значенню змінної `me`.  

post.publish()  
Викликає метод `publish` для об'єкта `post`, який, ймовірно, публікує пост (залежить від реалізації методу).  

>>> from django.utils import timezone  
Імпортує модуль `timezone` з Django для роботи з часовими зонами.  

>>> Post.objects.filter(published_date__lte=timezone.now())  
Повертає всі об'єкти моделі `Post`, у яких поле `published_date` менше або дорівнює поточному часу.  

post = Post.objects.get(title="Sample title")  
Повертає об'єкт моделі `Post`, у якого поле `title` дорівнює `"Sample title"`. Якщо такого об'єкта немає, буде помилка.  

Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')  
Повертає всі об'єкти моделі `Post`, у яких поле `published_date` менше або дорівнює поточному часу, відсортовані за зростанням значень поля `published_date`.  